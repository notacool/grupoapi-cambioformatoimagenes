#!/usr/bin/env python3
"""
Test Suite Completo para Patrones de Dise√±o
===========================================

Ejecuta todos los tests de los patrones de dise√±o implementados.
"""

import sys
import time
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.output_manager import output_manager


def run_all_pattern_tests():
    """Ejecuta todos los tests de patrones de dise√±o"""
    print("üöÄ Iniciando Test Suite Completo de Patrones de Dise√±o")
    print("=" * 60)
    
    # Importar y ejecutar tests de cada patr√≥n
    test_modules = [
        ("Factory Pattern", "test_factory_pattern"),
        ("Strategy Pattern", "test_strategy_pattern"),
        ("Observer Pattern", "test_observer_pattern"),
        ("Builder Pattern", "test_builder_pattern"),
        ("Command Pattern", "test_command_pattern")
    ]
    
    results = {}
    total_passed = 0
    total_failed = 0
    start_time = time.time()
    
    for pattern_name, module_name in test_modules:
        print(f"\nüß™ Ejecutando tests de {pattern_name}...")
        print("-" * 40)
        
        try:
            # Importar m√≥dulo de test
            module = __import__(module_name)
            
            # Ejecutar funci√≥n de test
            if hasattr(module, f'run_{module_name.split("_")[1]}_tests'):
                test_function = getattr(module, f'run_{module_name.split("_")[1]}_tests')
                success = test_function()
                
                if success:
                    results[pattern_name] = "‚úÖ PAS√ì"
                    total_passed += 1
                else:
                    results[pattern_name] = "‚ùå FALL√ì"
                    total_failed += 1
            else:
                print(f"‚ö†Ô∏è Funci√≥n de test no encontrada en {module_name}")
                results[pattern_name] = "‚ö†Ô∏è ERROR"
                total_failed += 1
                
        except ImportError as e:
            print(f"‚ùå Error importando {module_name}: {str(e)}")
            results[pattern_name] = "‚ùå ERROR DE IMPORT"
            total_failed += 1
        except Exception as e:
            print(f"‚ùå Error ejecutando tests de {pattern_name}: {str(e)}")
            results[pattern_name] = "‚ùå ERROR DE EJECUCI√ìN"
            total_failed += 1
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # Mostrar resultados finales
    print("\n" + "=" * 60)
    print("üìä RESULTADOS FINALES DEL TEST SUITE")
    print("=" * 60)
    
    for pattern_name, result in results.items():
        print(f"{result} {pattern_name}")
    
    print("-" * 60)
    print(f"üìà Resumen General:")
    print(f"   ‚úÖ Patrones que pasaron: {total_passed}")
    print(f"   ‚ùå Patrones que fallaron: {total_failed}")
    print(f"   üìä Total de patrones: {len(test_modules)}")
    print(f"   üéØ Tasa de √©xito: {(total_passed/len(test_modules)*100):.1f}%")
    print(f"   ‚è±Ô∏è Tiempo total: {total_time:.2f} segundos")
    
    if total_failed == 0:
        print("\nüéâ ¬°TODOS LOS PATRONES DE DISE√ëO PASARON LOS TESTS!")
        print("‚úÖ El sistema est√° listo para producci√≥n con patrones implementados")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total_failed} patrones fallaron los tests")
        print("üîß Revisar implementaciones antes de usar en producci√≥n")
        return False


def run_individual_pattern_test(pattern_name):
    """Ejecuta test de un patr√≥n espec√≠fico"""
    pattern_modules = {
        "factory": "test_factory_pattern",
        "strategy": "test_strategy_pattern", 
        "observer": "test_observer_pattern",
        "builder": "test_builder_pattern",
        "command": "test_command_pattern"
    }
    
    if pattern_name.lower() not in pattern_modules:
        print(f"‚ùå Patr√≥n '{pattern_name}' no encontrado")
        print(f"Patrones disponibles: {list(pattern_modules.keys())}")
        return False
    
    module_name = pattern_modules[pattern_name.lower()]
    print(f"üß™ Ejecutando test de {pattern_name.title()} Pattern...")
    
    try:
        module = __import__(module_name)
        test_function = getattr(module, f'run_{pattern_name.lower()}_tests')
        return test_function()
    except Exception as e:
        print(f"‚ùå Error ejecutando test: {str(e)}")
        return False


def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        # Ejecutar patr√≥n espec√≠fico
        pattern_name = sys.argv[1]
        success = run_individual_pattern_test(pattern_name)
    else:
        # Ejecutar todos los tests
        success = run_all_pattern_tests()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
